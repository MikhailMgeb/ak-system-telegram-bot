import {
  Update,
  Ctx,
  Start,
  Help,
  On,
  Hears,
  Action,
  Command,
  Message,
  InlineQuery
} from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { Injectable, Logger } from '@nestjs/common';

// –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { BotService } from './bot.service';
import { StartHandler } from './handlers/start.handler';
// import { ProfileHandler } from './handlers/profile.handler';
import { HelpHandler } from './handlers/help.handler';
import { MenuHandler } from './handlers/menu.handler';
// import { PaymentHandler } from './handlers/payment.handler';
// import { BonusHandler } from './handlers/bonus.handler';
// import { TeamHandler } from './handlers/team.handler';

@Update()
@Injectable()
export class BotUpdate {
  private readonly logger = new Logger(BotUpdate.name);
  
  constructor(
    private readonly botService: BotService,
    private readonly startHandler: StartHandler,
    // private readonly profileHandler: ProfileHandler,
    private readonly helpHandler: HelpHandler,
    private readonly menuHandler: MenuHandler,
    // private readonly paymentHandler: PaymentHandler,
    // private readonly bonusHandler: BonusHandler,
    // private readonly teamHandler: TeamHandler,
  ) {}
  
  // ==================== –ö–û–ú–ê–ù–î–´ ====================
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  @Start()
  async onStart(@Ctx() ctx: Context) {
    this.logger.log(`User ${ctx.from?.id} started the bot`);
    await this.startHandler.handle(ctx);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
   */
  @Help()
  async onHelp(@Ctx() ctx: Context) {
    this.logger.log(`User ${ctx.from?.id} requested help`);
    await this.helpHandler.handle(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
   */
  @Command('menu')
  async onMenu(@Ctx() ctx: Context) {
    this.logger.log(`User ${ctx.from?.id} requested menu`);
    await this.menuHandler.onBackToMenu(ctx);
  }

  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
  //  */
  // @Command('profile')
  // async onProfile(@Ctx() ctx: Context) {
  //   this.logger.log(`User ${ctx.from?.id} requested profile`);
  //   await this.profileHandler.showProfile(ctx);
  // }
  //
  // /**
  //  * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  //  */
  // @Command('admin')
  // async onAdmin(@Ctx() ctx: Context) {
  //   const userId = ctx.from?.id;
  //   if (!userId || !this.botService.isAdmin(userId)) {
  //     await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  //     return;
  //   }
  //
  //   const stats = await this.botService.getBotStats();
  //   await ctx.reply(
  //     `üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n` +
  //     `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(stats.uptime / 60)} –º–∏–Ω\n` +
  //     `üíæ –ü–∞–º—è—Ç—å: ${Math.round(stats.memoryUsage.used / 1024 / 1024)} MB\n` +
  //     `üìÖ –í—Ä–µ–º—è: ${stats.timestamp}`
  //   );
  // }
  //
  // // ==================== CALLBACK QUERIES (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫) ====================
  //
  /**
   * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   */
  @Action('back_to_menu')
  async onBackToMenu(@Ctx() ctx: Context) {
    await this.botService.answerCallback(ctx);
    await this.menuHandler.onBackToMenu(ctx);
  }

  /**
  //  * –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
  //  */
  @Action('start_work')
  async onStartWork(@Ctx() ctx: Context) {
    await this.botService.answerCallback(ctx);
    await this.botService.editMessage(
      ctx,
      'üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:',
      {
        inline_keyboard: [
          [
            { text: 'üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'create_project' },
            { text: 'üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç', callback_data: 'open_project' }
          ],
          [
            { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'analytics' }
          ],
          [
            { text: '‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
          ]
        ]
      }
    );
  }

  // /**
  //  * –ü–æ–∫—É–ø–∫–∞ PRO
  //  */
  // @Action('buy_pro')
  // async onBuyPro(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.paymentHandler.showProInfo(ctx);
  // }
  //
  // /**
  //  * –ü–æ–º–æ—â—å
  //  */
  // @Action('help')
  // async onHelpAction(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.helpHandler.handle(ctx);
  // }
  //
  // /**
  //  * –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
  //  */
  // @Action('get_bonus')
  // async onGetBonus(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.bonusHandler.showBonusMenu(ctx);
  // }
  //
  // /**
  //  * –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
  //  */
  // @Action('create_team')
  // async onCreateTeam(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.teamHandler.showTeamMenu(ctx);
  // }
  //
  // /**
  //  * –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
  //  */
  // @Action('profile')
  // async onProfileAction(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.profileHandler.showProfile(ctx);
  // }
  //
  // // ==================== –í–õ–û–ñ–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø ====================
  //
  // /**
  //  * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  //  */
  // @Action('create_project')
  // async onCreateProject(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.botService.editMessage(
  //     ctx,
  //     'üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:'
  //   );
  //
  //   // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
  //   // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Redis
  // }
  //
  // /**
  //  * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  //  */
  // @Action('edit_profile')
  // async onEditProfile(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.profileHandler.showEditMenu(ctx);
  // }
  //
  // /**
  //  * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  //  */
  // @Action('statistics')
  // async onStatistics(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.profileHandler.showStatistics(ctx);
  // }
  //
  // /**
  //  * –ù–∞—Å—Ç—Ä–æ–π–∫–∏
  //  */
  // @Action('settings')
  // async onSettings(@Ctx() ctx: Context) {
  //   await this.botService.answerCallback(ctx);
  //   await this.profileHandler.showSettings(ctx);
  // }
  //
  // // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  //  */
  // @On('text')
  // async onText(@Ctx() ctx: Context, @Message('text') text: string) {
  //   const userId = ctx.from?.id;
  //   this.logger.log(`User ${userId} sent text: ${text}`);
  //
  //   // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  //   switch (text.toLowerCase()) {
  //     case '–º–µ–Ω—é':
  //     case 'menu':
  //       await this.menuHandler.showMainMenu(ctx);
  //       break;
  //
  //     case '–ø—Ä–æ—Ñ–∏–ª—å':
  //     case 'profile':
  //       await this.profileHandler.showProfile(ctx);
  //       break;
  //
  //     case '–ø–æ–º–æ—â—å':
  //     case 'help':
  //       await this.helpHandler.handle(ctx);
  //       break;
  //
  //     default:
  //       // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  //       await this.handleCustomText(ctx, text);
  //   }
  // }
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  //  */
  // @On('voice')
  // async onVoice(@Ctx() ctx: Context) {
  //   await ctx.reply('üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
  // }
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  //  */
  @On('photo')
  async onPhoto(@Ctx() ctx: Context) {
    const photos = ctx.message && 'photo' in ctx.message ? ctx.message.photo : [];
    if (photos.length > 0) {
      await ctx.reply('üì∏ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
    }
  }
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  //  */
  // @On('document')
  // async onDocument(@Ctx() ctx: Context) {
  //   const fileInfo = await this.botService.handleFileUpload(ctx);
  //   if (fileInfo) {
  //     await ctx.reply(
  //       `üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω!\n\n` +
  //       `üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: ${fileInfo.fileName}\n` +
  //       `üìè –†–∞–∑–º–µ—Ä: ${Math.round((fileInfo.fileSize || 0) / 1024)} KB`
  //     );
  //   }
  // }
  //
  // // ==================== INLINE QUERIES ====================
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∑–∞–ø—Ä–æ—Å–æ–≤
  //  */
  // @InlineQuery()
  // async onInlineQuery(@Ctx() ctx: Context) {
  //   const query = ctx.inlineQuery?.query || '';
  //
  //   const results = [
  //     {
  //       type: 'article' as const,
  //       id: '1',
  //       title: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  //       description: '–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞',
  //       input_message_content: {
  //         message_text: '–û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...'
  //       }
  //     }
  //   ];
  //
  //   await ctx.answerInlineQuery(results);
  // }
  //
  // // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ====================
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries
  //  */
  // @Action(/.*/)
  // async onUnknownAction(@Ctx() ctx: Context) {
  //   const callbackData = ctx.callbackQuery && 'data' in ctx.callbackQuery
  //     ? ctx.callbackQuery.data
  //     : 'unknown';
  //
  //   this.logger.warn(`Unknown callback: ${callbackData} from user ${ctx.from?.id}`);
  //
  //   await this.botService.answerCallback(ctx, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  //   await this.menuHandler.showMainMenu(ctx);
  // }
  //
  // // ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ====================
  //
  // /**
  //  * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  //  */
  // private async handleCustomText(ctx: Context, text: string) {
  //   const sanitizedText = this.botService.sanitizeInput(text);
  //
  //   // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  //   // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  //
  //   // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–µ–Ω—é
  //   await ctx.reply(
  //     `–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: "${sanitizedText}"\n\n` +
  //     `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`,
  //     { reply_markup: this.botService.createMainMenu() }
  //   );
  // }
  //
  // /**
  //  * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  //  */
  // async logUpdate(ctx: Context, next: () => Promise<void>) {
  //   const userId = ctx.from?.id;
  //   const updateType = ctx.updateType;
  //
  //   this.logger.log(`Update received: ${updateType} from user ${userId}`);
  //
  //   try {
  //     await next();
  //   } catch (error) {
  //     this.logger.error(`Error processing update: ${error.message}`, error.stack);
  //
  //     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  //     try {
  //       await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  //     } catch (sendError) {
  //       this.logger.error(`Failed to send error message: ${sendError.message}`);
  //     }
  //   }
  // }
}