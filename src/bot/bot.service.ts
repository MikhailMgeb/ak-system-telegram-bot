import { Injectable, Logger } from '@nestjs/common';
import { Context } from 'telegraf';
import { InlineKeyboardMarkup, InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';

@Injectable()
export class BotService {
  private readonly logger = new Logger(BotService.name);
  
  // ==================== –†–ê–ë–û–¢–ê –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  getUserInfo(ctx: Context) {
    const user = ctx.from;
    return {
      id: user?.id,
      firstName: user?.first_name,
      lastName: user?.last_name,
      username: user?.username,
      languageCode: user?.language_code,
      isPremium: user?.is_premium || false,
    };
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  isAdmin(userId: number): boolean {
    const adminIds = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id)) || [];
    return adminIds.includes(userId);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PRO –ø–æ–¥–ø–∏—Å–∫–∞
   */
  async hasProSubscription(userId: number): Promise<boolean> {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    return false;
  }
  
  // ==================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ====================
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  formatWelcomeMessage(userName?: string): string {
    const name = userName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    return `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
   */
  formatProfileMessage(userInfo: any): string {
    return `üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n` +
      `üëã –ò–º—è: ${userInfo.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `üÜî ID: ${userInfo.id}\n` +
      `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${userInfo.registrationDate || '—Å–µ–≥–æ–¥–Ω—è'}\n` +
      `‚≠ê –°—Ç–∞—Ç—É—Å: ${userInfo.isPro ? 'PRO' : '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}\n` +
      `üéØ –û—á–∫–∏: ${userInfo.points || 0}`;
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ PRO –ø–æ–¥–ø–∏—Å–∫–µ
   */
  formatProMessage(): string {
    return `‚≠ê PRO –≤–µ—Ä—Å–∏—è\n\n` +
      `–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ PRO:\n` +
      `‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n` +
      `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n` +
      `‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n` +
      `‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–µ—Ç–∞-—Ñ—É–Ω–∫—Ü–∏—è–º\n\n` +
      `üí∞ –¶–µ–Ω–∞: 990‚ÇΩ/–º–µ—Å—è—Ü`;
  }
  
  // ==================== –£–¢–ò–õ–ò–¢–´ ====================
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendMessage(ctx: Context, text: string, keyboard?: InlineKeyboardMarkup) {
    try {
      await ctx.reply(text, keyboard ? { reply_markup: keyboard } : undefined);
      this.logger.log(`Message sent to user ${ctx.from?.id}`);
    } catch (error) {
      this.logger.error(`Failed to send message: ${error.message}`);
    }
  }
  
  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async editMessage(ctx: Context, text: string, keyboard?: InlineKeyboardMarkup) {
    try {
      await ctx.editMessageText(text, keyboard ? { reply_markup: keyboard } : undefined);
      this.logger.log(`Message edited for user ${ctx.from?.id}`);
    } catch (error) {
      this.logger.error(`Failed to edit message: ${error.message}`);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(ctx, text, keyboard);
    }
  }
  
  /**
   * –û—Ç–≤–µ—Ç –Ω–∞ callback query
   */
  async answerCallback(ctx: Context, text?: string) {
    try {
      await ctx.answerCbQuery(text);
    } catch (error) {
      this.logger.error(`Failed to answer callback: ${error.message}`);
    }
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  logUserAction(userId: number, action: string, data?: any) {
    this.logger.log(`User ${userId} performed action: ${action}`, data);
  }
  
  // ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å callback data
   */
  isValidCallback(callbackData: string): boolean {
    const validCallbacks = [
      'start_work', 'buy_pro', 'help', 'get_bonus',
      'create_team', 'profile', 'back_to_menu',
      'edit_profile', 'statistics', 'settings',
      'manual', 'support', 'faq', 'payment_pro'
    ];
    return validCallbacks.includes(callbackData);
  }
  
  /**
   * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
   */
  sanitizeInput(input: string): string {
    return input
      .replace(/[<>]/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
      .trim()
      .substring(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  }
  
  // ==================== –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–û–î–´ ====================
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
   */
  async getBotStats() {
    return {
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      timestamp: new Date().toISOString(),
    };
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
   */
  async checkHealth(): Promise<boolean> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏:
      // - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // - –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö API
      // - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
      return true;
    } catch (error) {
      this.logger.error(`Health check failed: ${error.message}`);
      return false;
    }
  }
  
  // ==================== –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò/–ú–ï–î–ò–ê ====================
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async handleFileUpload(ctx: Context) {
    if (ctx.message && 'document' in ctx.message) {
      const document = ctx.message.document;
      this.logger.log(`File uploaded: ${document.file_name}, size: ${document.file_size}`);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
      return {
        fileId: document.file_id,
        fileName: document.file_name,
        fileSize: document.file_size,
      };
    }
    return null;
  }
  
  // ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
   */
  async notifyAdmins(message: string) {
    const adminIds = process.env.ADMIN_IDS?.split(',').map(id => parseInt(id)) || [];
    
    for (const adminId of adminIds) {
      try {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot instance –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        // await this.bot.telegram.sendMessage(adminId, `üîî ${message}`);
        this.logger.log(`Notification sent to admin ${adminId}`);
      } catch (error) {
        this.logger.error(`Failed to notify admin ${adminId}: ${error.message}`);
      }
    }
  }
}